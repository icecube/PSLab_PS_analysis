#ifndef LLH_LLHTEST_H_
#define LLH_LLHTEST_H_

#include "TH1.h"

// Forward Declarations (when feasible, more efficient than including headers)
class AnalysisLlh;
class AnalysisSet;
class Coord;


class LlhTest {

 protected:
  AnalysisSet *aSet_;
  AnalysisLlh *llh_;
  const Coord *srcCoord_;

  double monitorPercent_;

 public:

  LlhTest() {
    llh_ = NULL;
    aSet_ = NULL;
    srcCoord_ = NULL;
    monitorPercent_ = 1.;
  }

  virtual ~LlhTest() { };

  void SetAnalysisSet(AnalysisSet &aSet) { aSet_ = &aSet;}

  void SetLogLikelihood(AnalysisLlh &llh) { llh_ = &llh;}

  void SetSrcCoord(const Coord &srcCoord) { srcCoord_ = &srcCoord;}


  // Specify frequency of monitoring report, in percentage, 
  // i.e. maximum is 100.  (not 1.)
  // if ==0, no monitoring status is given
  void SetMonitorPercent(double percent) { monitorPercent_ = percent; }


  bool Ready();

  void TestRealData();  // that is, test the data without scrambling,
  // and without adding any source events


  // These tests all use scrambled data (or whatever method is implemented
  // in aSet to generate fake data samples)

  // Source events are generated by the analysisSet according the source
  // location specified in its own source module...
  // This means the srcCoord above--where the search is conducted--
  // can be somewhere else
  void TestGenerateData_nSrcEvents(int nSrcEvents);

  void Stats_nSrcEvents(int nSrcEvents, int nTrials,
			TH1 *hTestStatistic,
			TH1 *hLogEstProb,
			TH1 *hPar );

  void Stats_nSrcEvents(int nSrcEvents, int nTrials) 
  {
    Stats_nSrcEvents(nSrcEvents, nTrials, NULL, NULL, NULL);
  }



};


#endif // LLH_LLHTEST_H_
